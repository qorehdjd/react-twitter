{"version":3,"file":"static/chunks/pages/index-3f6954d215db1fe1.js","mappings":"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","sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/","webpack://_N_E/<anon>"],"sourcesContent":["import React, {\r\n  useCallback, useEffect, useRef,\r\n} from 'react';\r\nimport { Form, Button, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nfunction PostForm() {\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) setText('');\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData(); // 이미지가 있을 경우 formdata로 보내야된다.\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    const imageFormData = new FormData(); // multipart/form-data 형식으로 보냄\r\n    [].forEach.call(e.target.files, (f) => { // e.target.files가 유사배열이라 배열로 바꾼다.\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback((imagePath) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: { imagePath },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form\r\n      style={{ margin: '10px 0 20px' }}\r\n      encType=\"multipart/form-data\"\r\n      onFinish={onSubmit}\r\n    >\r\n      <Input.TextArea\r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 신기한 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">\r\n          쨱짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths?.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={v.replace(/\\/thumb\\//, '/original/')} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(v)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default PostForm;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\n\r\nimport AppLayout from '../components/Layout/AppLayout';\r\nimport PostCard from '../components/PostCard';\r\nimport PostForm from '../components/PostForm';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const didMount = useRef(false);\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      if (retweetError) alert(retweetError);\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n  }, [retweetError]);\r\n\r\n  useEffect(() => {\r\n    function infiniteScroll() {\r\n      if (!hasMorePost) return window.removeEventListener('scroll', infiniteScroll);\r\n      if (loadPostsLoading) return;\r\n      if (window.scrollY + document.documentElement.clientHeight + 500 > document.documentElement.scrollHeight) {\r\n        const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n        dispatch({\r\n          type: LOAD_POSTS_REQUEST,\r\n          lastId,\r\n        });\r\n      }\r\n    }\r\n    window.addEventListener('scroll', infiniteScroll);\r\n    return () => window.removeEventListener('scroll', infiniteScroll);\r\n  }, [hasMorePost, loadPostsLoading, mainPosts]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {me && <PostForm />}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post} />\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\n// 프론트 서버에서 실행되는 부분\r\n// 첫요청은 라우터 부분으로 ('/',(req, res, next) => {}) 식으로 페이지가 각각의 라우터이다.\r\n// 그다음부터는 클라이언트사이드 라우터로 서버에서 json데이터(getServerSideProps에서 return한값)을 가져온다\r\n// localhost:3060/로 요청이 왔을 때 index페이지의 getServerSideProps가 실행된다.\r\n// getServerSideProps에서는 항상 context.req가 존재한다\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => { // Home보다 먼저 실행돼서 데이터를 가져온다\r\n  console.log(123);\r\n  const { cookie } = context.req.headers; // context.req는 브라우저에서 보낸 정보\r\n  axios.defaults.headers.Cookie = ''; // 쿠키가 공유되는걸 막는다\r\n  if (cookie) {\r\n    axios.defaults.headers.Cookie = cookie;\r\n  }\r\n  // 실행된 결과들을 hydrate로 전달해준다.\r\n  context.store.dispatch({\r\n    type: LOAD_MY_INFO_REQUEST,\r\n  });\r\n  context.store.dispatch({\r\n    type: LOAD_POSTS_REQUEST,\r\n  });\r\n  context.store.dispatch(END); // REQUEST요청 보내고 SUCCESS 될때까지 기다려준다.\r\n  await context.store.sagaTask.toPromise();\r\n});\r\n\r\nexport default Home;\r\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  "],"names":["__webpack_exports__","_useSelector","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","_useInput","useInput","_useInput2","C_Users_U_S_E_R_Desktop_prepare_react_twitter_frontend_node_modules_next_dist_compiled_babel_runtime_helpers_esm_slicedToArray_js__WEBPACK_IMPORTED_MODULE_5__","Z","text","onChangeText","setText","useEffect","onSubmit","useCallback","trim","alert","formData","FormData","forEach","p","append","type","ADD_POST_REQUEST","data","imageInput","useRef","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","UPLOAD_IMAGES_REQUEST","onRemoveImage","imagePath","REMOVE_IMAGE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__","jsxs","antd__WEBPACK_IMPORTED_MODULE_6__","style","margin","encType","onFinish","children","jsx","antd__WEBPACK_IMPORTED_MODULE_7__","TextArea","value","onChange","maxLength","placeholder","name","multiple","hidden","ref","antd__WEBPACK_IMPORTED_MODULE_8__","onClick","htmlType","map","v","display","src","replace","width","alt","didMount","me","user","_useSelector2","mainPosts","hasMorePost","loadPostsLoading","retweetError","infiniteScroll","window","removeEventListener","scrollY","document","documentElement","clientHeight","scrollHeight","_mainPosts","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__","_components_Layout_AppLayout__WEBPACK_IMPORTED_MODULE_2__","_components_PostForm__WEBPACK_IMPORTED_MODULE_4__","_components_PostCard__WEBPACK_IMPORTED_MODULE_3__","__NEXT_P","push","__webpack_require__"],"sourceRoot":""}