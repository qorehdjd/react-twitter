{"version":3,"file":"697.js","mappings":"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","sources":["webpack://react-nodebird/./components/PostForm.js"],"sourcesContent":["import React, {\r\n  useCallback, useEffect, useRef,\r\n} from 'react';\r\nimport { Form, Button, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nfunction PostForm() {\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) setText('');\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData(); // 이미지가 있을 경우 formdata로 보내야된다.\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const imageInput = useRef();\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    const imageFormData = new FormData(); // multipart/form-data 형식으로 보냄\r\n    [].forEach.call(e.target.files, (f) => { // e.target.files가 유사배열이라 배열로 바꾼다.\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onRemoveImage = useCallback((imagePath) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: { imagePath },\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form\r\n      style={{ margin: '10px 0 20px' }}\r\n      encType=\"multipart/form-data\"\r\n      onFinish={onSubmit}\r\n    >\r\n      <Input.TextArea\r\n        value={text}\r\n        onChange={onChangeText}\r\n        maxLength={140}\r\n        placeholder=\"어떤 신기한 일이 있었나요?\"\r\n      />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">\r\n          쨱짹\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths?.map((v) => (\r\n          <div key={v} style={{ display: 'inline-block' }}>\r\n            <img src={v.replace(/\\/thumb\\//, '/original/')} style={{ width: '200px' }} alt={v} />\r\n            <div>\r\n              <Button onClick={onRemoveImage(v)}>제거</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default PostForm;\r\n"],"names":["React","useCallback","useEffect","useRef","Form","Button","Input","useDispatch","useSelector","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","imageInput","onClickImageUpload","current","click","onChangeImages","e","imageFormData","call","target","files","f","onRemoveImage","imagePath","margin","float","map","v","display","replace","width"],"sourceRoot":""}